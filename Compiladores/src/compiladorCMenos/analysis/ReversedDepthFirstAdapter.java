/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladorCMenos.analysis;

import java.util.*;
import compiladorCMenos.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        if(node.getDeclFuncaoMain() != null)
        {
            node.getDeclFuncaoMain().apply(this);
        }
        if(node.getSeqDeclaracao() != null)
        {
            node.getSeqDeclaracao().apply(this);
        }
        outAPrograma(node);
    }

    public void inASeqDeclaracao(ASeqDeclaracao node)
    {
        defaultIn(node);
    }

    public void outASeqDeclaracao(ASeqDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeqDeclaracao(ASeqDeclaracao node)
    {
        inASeqDeclaracao(node);
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outASeqDeclaracao(node);
    }

    public void inADeclFuncaoMain(ADeclFuncaoMain node)
    {
        defaultIn(node);
    }

    public void outADeclFuncaoMain(ADeclFuncaoMain node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclFuncaoMain(ADeclFuncaoMain node)
    {
        inADeclFuncaoMain(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        if(node.getFPar() != null)
        {
            node.getFPar().apply(this);
        }
        if(node.getPChaveVoid() != null)
        {
            node.getPChaveVoid().apply(this);
        }
        if(node.getAPar() != null)
        {
            node.getAPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipoAvalorado() != null)
        {
            node.getTipoAvalorado().apply(this);
        }
        outADeclFuncaoMain(node);
    }

    public void inAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDeclaracao(AVariavelDeclaracao node)
    {
        inAVariavelDeclaracao(node);
        if(node.getPVirg() != null)
        {
            node.getPVirg().apply(this);
        }
        if(node.getDeclVariavel() != null)
        {
            node.getDeclVariavel().apply(this);
        }
        outAVariavelDeclaracao(node);
    }

    public void inAFuncaoDeclaracao(AFuncaoDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoDeclaracao(AFuncaoDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoDeclaracao(AFuncaoDeclaracao node)
    {
        inAFuncaoDeclaracao(node);
        if(node.getDeclFuncao() != null)
        {
            node.getDeclFuncao().apply(this);
        }
        outAFuncaoDeclaracao(node);
    }

    public void inAVariavelDeclVariavel(AVariavelDeclVariavel node)
    {
        defaultIn(node);
    }

    public void outAVariavelDeclVariavel(AVariavelDeclVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDeclVariavel(AVariavelDeclVariavel node)
    {
        inAVariavelDeclVariavel(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipoValorado() != null)
        {
            node.getTipoValorado().apply(this);
        }
        outAVariavelDeclVariavel(node);
    }

    public void inAMatrizDeclVariavel(AMatrizDeclVariavel node)
    {
        defaultIn(node);
    }

    public void outAMatrizDeclVariavel(AMatrizDeclVariavel node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrizDeclVariavel(AMatrizDeclVariavel node)
    {
        inAMatrizDeclVariavel(node);
        if(node.getFCol() != null)
        {
            node.getFCol().apply(this);
        }
        if(node.getSeqParametro() != null)
        {
            node.getSeqParametro().apply(this);
        }
        if(node.getACol() != null)
        {
            node.getACol().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipoValorado() != null)
        {
            node.getTipoValorado().apply(this);
        }
        outAMatrizDeclVariavel(node);
    }

    public void inANormalDeclFuncao(ANormalDeclFuncao node)
    {
        defaultIn(node);
    }

    public void outANormalDeclFuncao(ANormalDeclFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalDeclFuncao(ANormalDeclFuncao node)
    {
        inANormalDeclFuncao(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        if(node.getFPar() != null)
        {
            node.getFPar().apply(this);
        }
        if(node.getSeqDeclParametro() != null)
        {
            node.getSeqDeclParametro().apply(this);
        }
        if(node.getAPar() != null)
        {
            node.getAPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outANormalDeclFuncao(node);
    }

    public void inASemParametroDeclFuncao(ASemParametroDeclFuncao node)
    {
        defaultIn(node);
    }

    public void outASemParametroDeclFuncao(ASemParametroDeclFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemParametroDeclFuncao(ASemParametroDeclFuncao node)
    {
        inASemParametroDeclFuncao(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        if(node.getFPar() != null)
        {
            node.getFPar().apply(this);
        }
        if(node.getTipoAvalorado() != null)
        {
            node.getTipoAvalorado().apply(this);
        }
        if(node.getAPar() != null)
        {
            node.getAPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outASemParametroDeclFuncao(node);
    }

    public void inAValoradoTipo(AValoradoTipo node)
    {
        defaultIn(node);
    }

    public void outAValoradoTipo(AValoradoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValoradoTipo(AValoradoTipo node)
    {
        inAValoradoTipo(node);
        if(node.getTipoValorado() != null)
        {
            node.getTipoValorado().apply(this);
        }
        outAValoradoTipo(node);
    }

    public void inAAvaloradoTipo(AAvaloradoTipo node)
    {
        defaultIn(node);
    }

    public void outAAvaloradoTipo(AAvaloradoTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvaloradoTipo(AAvaloradoTipo node)
    {
        inAAvaloradoTipo(node);
        if(node.getTipoAvalorado() != null)
        {
            node.getTipoAvalorado().apply(this);
        }
        outAAvaloradoTipo(node);
    }

    public void inAIntTipoValorado(AIntTipoValorado node)
    {
        defaultIn(node);
    }

    public void outAIntTipoValorado(AIntTipoValorado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTipoValorado(AIntTipoValorado node)
    {
        inAIntTipoValorado(node);
        if(node.getPChaveInt() != null)
        {
            node.getPChaveInt().apply(this);
        }
        outAIntTipoValorado(node);
    }

    public void inAStringTipoValorado(AStringTipoValorado node)
    {
        defaultIn(node);
    }

    public void outAStringTipoValorado(AStringTipoValorado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTipoValorado(AStringTipoValorado node)
    {
        inAStringTipoValorado(node);
        if(node.getPChaveString() != null)
        {
            node.getPChaveString().apply(this);
        }
        outAStringTipoValorado(node);
    }

    public void inATipoAvalorado(ATipoAvalorado node)
    {
        defaultIn(node);
    }

    public void outATipoAvalorado(ATipoAvalorado node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoAvalorado(ATipoAvalorado node)
    {
        inATipoAvalorado(node);
        if(node.getPChaveVoid() != null)
        {
            node.getPChaveVoid().apply(this);
        }
        outATipoAvalorado(node);
    }

    public void inASeqDeclParametro(ASeqDeclParametro node)
    {
        defaultIn(node);
    }

    public void outASeqDeclParametro(ASeqDeclParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeqDeclParametro(ASeqDeclParametro node)
    {
        inASeqDeclParametro(node);
        {
            List<PDeclParametroLista> copy = new ArrayList<PDeclParametroLista>(node.getDeclParametroLista());
            Collections.reverse(copy);
            for(PDeclParametroLista e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDeclParametro() != null)
        {
            node.getDeclParametro().apply(this);
        }
        outASeqDeclParametro(node);
    }

    public void inADeclParametroLista(ADeclParametroLista node)
    {
        defaultIn(node);
    }

    public void outADeclParametroLista(ADeclParametroLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclParametroLista(ADeclParametroLista node)
    {
        inADeclParametroLista(node);
        if(node.getDeclParametro() != null)
        {
            node.getDeclParametro().apply(this);
        }
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        outADeclParametroLista(node);
    }

    public void inAVariavelDeclParametro(AVariavelDeclParametro node)
    {
        defaultIn(node);
    }

    public void outAVariavelDeclParametro(AVariavelDeclParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDeclParametro(AVariavelDeclParametro node)
    {
        inAVariavelDeclParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getTipoValorado() != null)
        {
            node.getTipoValorado().apply(this);
        }
        outAVariavelDeclParametro(node);
    }

    public void inAMatrizDeclParametro(AMatrizDeclParametro node)
    {
        defaultIn(node);
    }

    public void outAMatrizDeclParametro(AMatrizDeclParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrizDeclParametro(AMatrizDeclParametro node)
    {
        inAMatrizDeclParametro(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<TMult> copy = new ArrayList<TMult>(node.getMult());
            Collections.reverse(copy);
            for(TMult e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTipoValorado() != null)
        {
            node.getTipoValorado().apply(this);
        }
        outAMatrizDeclParametro(node);
    }

    public void inABloco(ABloco node)
    {
        defaultIn(node);
    }

    public void outABloco(ABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABloco(ABloco node)
    {
        inABloco(node);
        if(node.getFChave() != null)
        {
            node.getFChave().apply(this);
        }
        if(node.getSeqComando() != null)
        {
            node.getSeqComando().apply(this);
        }
        if(node.getAChave() != null)
        {
            node.getAChave().apply(this);
        }
        outABloco(node);
    }

    public void inASeqComando(ASeqComando node)
    {
        defaultIn(node);
    }

    public void outASeqComando(ASeqComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeqComando(ASeqComando node)
    {
        inASeqComando(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outASeqComando(node);
    }

    public void inASemSubComandoComando(ASemSubComandoComando node)
    {
        defaultIn(node);
    }

    public void outASemSubComandoComando(ASemSubComandoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemSubComandoComando(ASemSubComandoComando node)
    {
        inASemSubComandoComando(node);
        if(node.getSemSubComando() != null)
        {
            node.getSemSubComando().apply(this);
        }
        outASemSubComandoComando(node);
    }

    public void inARepeticaoComando(ARepeticaoComando node)
    {
        defaultIn(node);
    }

    public void outARepeticaoComando(ARepeticaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeticaoComando(ARepeticaoComando node)
    {
        inARepeticaoComando(node);
        if(node.getComandoRepeticao() != null)
        {
            node.getComandoRepeticao().apply(this);
        }
        outARepeticaoComando(node);
    }

    public void inACondicaoComando(ACondicaoComando node)
    {
        defaultIn(node);
    }

    public void outACondicaoComando(ACondicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicaoComando(ACondicaoComando node)
    {
        inACondicaoComando(node);
        if(node.getComandoCondicao() != null)
        {
            node.getComandoCondicao().apply(this);
        }
        outACondicaoComando(node);
    }

    public void inACondicaoElseComando(ACondicaoElseComando node)
    {
        defaultIn(node);
    }

    public void outACondicaoElseComando(ACondicaoElseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicaoElseComando(ACondicaoElseComando node)
    {
        inACondicaoElseComando(node);
        if(node.getComandoCondicaoElse() != null)
        {
            node.getComandoCondicaoElse().apply(this);
        }
        outACondicaoElseComando(node);
    }

    public void inASemSubComandoComandoIfNaoCurto(ASemSubComandoComandoIfNaoCurto node)
    {
        defaultIn(node);
    }

    public void outASemSubComandoComandoIfNaoCurto(ASemSubComandoComandoIfNaoCurto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemSubComandoComandoIfNaoCurto(ASemSubComandoComandoIfNaoCurto node)
    {
        inASemSubComandoComandoIfNaoCurto(node);
        if(node.getSemSubComando() != null)
        {
            node.getSemSubComando().apply(this);
        }
        outASemSubComandoComandoIfNaoCurto(node);
    }

    public void inARepeticaoIfNaoCurtoComandoIfNaoCurto(ARepeticaoIfNaoCurtoComandoIfNaoCurto node)
    {
        defaultIn(node);
    }

    public void outARepeticaoIfNaoCurtoComandoIfNaoCurto(ARepeticaoIfNaoCurtoComandoIfNaoCurto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeticaoIfNaoCurtoComandoIfNaoCurto(ARepeticaoIfNaoCurtoComandoIfNaoCurto node)
    {
        inARepeticaoIfNaoCurtoComandoIfNaoCurto(node);
        if(node.getComandoRepeticaoIfNaoCurto() != null)
        {
            node.getComandoRepeticaoIfNaoCurto().apply(this);
        }
        outARepeticaoIfNaoCurtoComandoIfNaoCurto(node);
    }

    public void inACondicaoElseIfNaoCurtoComandoIfNaoCurto(ACondicaoElseIfNaoCurtoComandoIfNaoCurto node)
    {
        defaultIn(node);
    }

    public void outACondicaoElseIfNaoCurtoComandoIfNaoCurto(ACondicaoElseIfNaoCurtoComandoIfNaoCurto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicaoElseIfNaoCurtoComandoIfNaoCurto(ACondicaoElseIfNaoCurtoComandoIfNaoCurto node)
    {
        inACondicaoElseIfNaoCurtoComandoIfNaoCurto(node);
        if(node.getComandoCondicaoElseIfNaoCurto() != null)
        {
            node.getComandoCondicaoElseIfNaoCurto().apply(this);
        }
        outACondicaoElseIfNaoCurtoComandoIfNaoCurto(node);
    }

    public void inABlocoSemSubComando(ABlocoSemSubComando node)
    {
        defaultIn(node);
    }

    public void outABlocoSemSubComando(ABlocoSemSubComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoSemSubComando(ABlocoSemSubComando node)
    {
        inABlocoSemSubComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoSemSubComando(node);
    }

    public void inADeclaracaoSemSubComando(ADeclaracaoSemSubComando node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoSemSubComando(ADeclaracaoSemSubComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoSemSubComando(ADeclaracaoSemSubComando node)
    {
        inADeclaracaoSemSubComando(node);
        if(node.getPVirg() != null)
        {
            node.getPVirg().apply(this);
        }
        if(node.getDeclVariavel() != null)
        {
            node.getDeclVariavel().apply(this);
        }
        outADeclaracaoSemSubComando(node);
    }

    public void inAAtribuicaoSemSubComando(AAtribuicaoSemSubComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoSemSubComando(AAtribuicaoSemSubComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoSemSubComando(AAtribuicaoSemSubComando node)
    {
        inAAtribuicaoSemSubComando(node);
        if(node.getPVirg() != null)
        {
            node.getPVirg().apply(this);
        }
        if(node.getComandoAtribuicao() != null)
        {
            node.getComandoAtribuicao().apply(this);
        }
        outAAtribuicaoSemSubComando(node);
    }

    public void inAFuncaoSemSubComando(AFuncaoSemSubComando node)
    {
        defaultIn(node);
    }

    public void outAFuncaoSemSubComando(AFuncaoSemSubComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoSemSubComando(AFuncaoSemSubComando node)
    {
        inAFuncaoSemSubComando(node);
        if(node.getPVirg() != null)
        {
            node.getPVirg().apply(this);
        }
        if(node.getComandoFuncao() != null)
        {
            node.getComandoFuncao().apply(this);
        }
        outAFuncaoSemSubComando(node);
    }

    public void inARetornoSemSubComando(ARetornoSemSubComando node)
    {
        defaultIn(node);
    }

    public void outARetornoSemSubComando(ARetornoSemSubComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetornoSemSubComando(ARetornoSemSubComando node)
    {
        inARetornoSemSubComando(node);
        if(node.getPVirg() != null)
        {
            node.getPVirg().apply(this);
        }
        if(node.getComandoRetorno() != null)
        {
            node.getComandoRetorno().apply(this);
        }
        outARetornoSemSubComando(node);
    }

    public void inAVariavelComandoAtribuicao(AVariavelComandoAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAVariavelComandoAtribuicao(AVariavelComandoAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelComandoAtribuicao(AVariavelComandoAtribuicao node)
    {
        inAVariavelComandoAtribuicao(node);
        if(node.getExpGeral() != null)
        {
            node.getExpGeral().apply(this);
        }
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVariavelComandoAtribuicao(node);
    }

    public void inAMatrizComandoAtribuicao(AMatrizComandoAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAMatrizComandoAtribuicao(AMatrizComandoAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatrizComandoAtribuicao(AMatrizComandoAtribuicao node)
    {
        inAMatrizComandoAtribuicao(node);
        if(node.getExpGeral() != null)
        {
            node.getExpGeral().apply(this);
        }
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getFCol() != null)
        {
            node.getFCol().apply(this);
        }
        if(node.getSeqParametro() != null)
        {
            node.getSeqParametro().apply(this);
        }
        if(node.getACol() != null)
        {
            node.getACol().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAMatrizComandoAtribuicao(node);
    }

    public void inAComandoRepeticao(AComandoRepeticao node)
    {
        defaultIn(node);
    }

    public void outAComandoRepeticao(AComandoRepeticao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoRepeticao(AComandoRepeticao node)
    {
        inAComandoRepeticao(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getFPar() != null)
        {
            node.getFPar().apply(this);
        }
        if(node.getExpGeral() != null)
        {
            node.getExpGeral().apply(this);
        }
        if(node.getAPar() != null)
        {
            node.getAPar().apply(this);
        }
        if(node.getPChaveWhile() != null)
        {
            node.getPChaveWhile().apply(this);
        }
        outAComandoRepeticao(node);
    }

    public void inAComandoCondicao(AComandoCondicao node)
    {
        defaultIn(node);
    }

    public void outAComandoCondicao(AComandoCondicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoCondicao(AComandoCondicao node)
    {
        inAComandoCondicao(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getFPar() != null)
        {
            node.getFPar().apply(this);
        }
        if(node.getExpGeral() != null)
        {
            node.getExpGeral().apply(this);
        }
        if(node.getAPar() != null)
        {
            node.getAPar().apply(this);
        }
        if(node.getPChaveIf() != null)
        {
            node.getPChaveIf().apply(this);
        }
        outAComandoCondicao(node);
    }

    public void inAComandoCondicaoElse(AComandoCondicaoElse node)
    {
        defaultIn(node);
    }

    public void outAComandoCondicaoElse(AComandoCondicaoElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoCondicaoElse(AComandoCondicaoElse node)
    {
        inAComandoCondicaoElse(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getPChaveElse() != null)
        {
            node.getPChaveElse().apply(this);
        }
        if(node.getComandoIfNaoCurto() != null)
        {
            node.getComandoIfNaoCurto().apply(this);
        }
        if(node.getFPar() != null)
        {
            node.getFPar().apply(this);
        }
        if(node.getExpGeral() != null)
        {
            node.getExpGeral().apply(this);
        }
        if(node.getAPar() != null)
        {
            node.getAPar().apply(this);
        }
        if(node.getPChaveIf() != null)
        {
            node.getPChaveIf().apply(this);
        }
        outAComandoCondicaoElse(node);
    }

    public void inAComandoRepeticaoIfNaoCurto(AComandoRepeticaoIfNaoCurto node)
    {
        defaultIn(node);
    }

    public void outAComandoRepeticaoIfNaoCurto(AComandoRepeticaoIfNaoCurto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoRepeticaoIfNaoCurto(AComandoRepeticaoIfNaoCurto node)
    {
        inAComandoRepeticaoIfNaoCurto(node);
        if(node.getComandoIfNaoCurto() != null)
        {
            node.getComandoIfNaoCurto().apply(this);
        }
        if(node.getFPar() != null)
        {
            node.getFPar().apply(this);
        }
        if(node.getExpGeral() != null)
        {
            node.getExpGeral().apply(this);
        }
        if(node.getAPar() != null)
        {
            node.getAPar().apply(this);
        }
        if(node.getPChaveWhile() != null)
        {
            node.getPChaveWhile().apply(this);
        }
        outAComandoRepeticaoIfNaoCurto(node);
    }

    public void inAComandoCondicaoElseIfNaoCurto(AComandoCondicaoElseIfNaoCurto node)
    {
        defaultIn(node);
    }

    public void outAComandoCondicaoElseIfNaoCurto(AComandoCondicaoElseIfNaoCurto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoCondicaoElseIfNaoCurto(AComandoCondicaoElseIfNaoCurto node)
    {
        inAComandoCondicaoElseIfNaoCurto(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getPChaveElse() != null)
        {
            node.getPChaveElse().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getFPar() != null)
        {
            node.getFPar().apply(this);
        }
        if(node.getExpGeral() != null)
        {
            node.getExpGeral().apply(this);
        }
        if(node.getAPar() != null)
        {
            node.getAPar().apply(this);
        }
        if(node.getPChaveIf() != null)
        {
            node.getPChaveIf().apply(this);
        }
        outAComandoCondicaoElseIfNaoCurto(node);
    }

    public void inAComandoFuncao(AComandoFuncao node)
    {
        defaultIn(node);
    }

    public void outAComandoFuncao(AComandoFuncao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoFuncao(AComandoFuncao node)
    {
        inAComandoFuncao(node);
        if(node.getFPar() != null)
        {
            node.getFPar().apply(this);
        }
        if(node.getSeqParametro() != null)
        {
            node.getSeqParametro().apply(this);
        }
        if(node.getAPar() != null)
        {
            node.getAPar().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAComandoFuncao(node);
    }

    public void inASeqParametro(ASeqParametro node)
    {
        defaultIn(node);
    }

    public void outASeqParametro(ASeqParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeqParametro(ASeqParametro node)
    {
        inASeqParametro(node);
        {
            List<PParametroLista> copy = new ArrayList<PParametroLista>(node.getParametroLista());
            Collections.reverse(copy);
            for(PParametroLista e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpGeral() != null)
        {
            node.getExpGeral().apply(this);
        }
        outASeqParametro(node);
    }

    public void inAParametroLista(AParametroLista node)
    {
        defaultIn(node);
    }

    public void outAParametroLista(AParametroLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParametroLista(AParametroLista node)
    {
        inAParametroLista(node);
        if(node.getExpGeral() != null)
        {
            node.getExpGeral().apply(this);
        }
        if(node.getVirg() != null)
        {
            node.getVirg().apply(this);
        }
        outAParametroLista(node);
    }

    public void inAComandoRetorno(AComandoRetorno node)
    {
        defaultIn(node);
    }

    public void outAComandoRetorno(AComandoRetorno node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoRetorno(AComandoRetorno node)
    {
        inAComandoRetorno(node);
        if(node.getExpGeral() != null)
        {
            node.getExpGeral().apply(this);
        }
        if(node.getPChaveReturn() != null)
        {
            node.getPChaveReturn().apply(this);
        }
        outAComandoRetorno(node);
    }

    public void inAOpBoolExpGeral(AOpBoolExpGeral node)
    {
        defaultIn(node);
    }

    public void outAOpBoolExpGeral(AOpBoolExpGeral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpBoolExpGeral(AOpBoolExpGeral node)
    {
        inAOpBoolExpGeral(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getOpBool() != null)
        {
            node.getOpBool().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAOpBoolExpGeral(node);
    }

    public void inAExpExpGeral(AExpExpGeral node)
    {
        defaultIn(node);
    }

    public void outAExpExpGeral(AExpExpGeral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpExpGeral(AExpExpGeral node)
    {
        inAExpExpGeral(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpExpGeral(node);
    }

    public void inAOpSomaExp(AOpSomaExp node)
    {
        defaultIn(node);
    }

    public void outAOpSomaExp(AOpSomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpSomaExp(AOpSomaExp node)
    {
        inAOpSomaExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getOpSoma() != null)
        {
            node.getOpSoma().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAOpSomaExp(node);
    }

    public void inATermoExp(ATermoExp node)
    {
        defaultIn(node);
    }

    public void outATermoExp(ATermoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExp(ATermoExp node)
    {
        inATermoExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExp(node);
    }

    public void inAOpMultTermo(AOpMultTermo node)
    {
        defaultIn(node);
    }

    public void outAOpMultTermo(AOpMultTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpMultTermo(AOpMultTermo node)
    {
        inAOpMultTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getOpMult() != null)
        {
            node.getOpMult().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAOpMultTermo(node);
    }

    public void inAFatorTermo(AFatorTermo node)
    {
        defaultIn(node);
    }

    public void outAFatorTermo(AFatorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermo(AFatorTermo node)
    {
        inAFatorTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorTermo(node);
    }

    public void inAIdFator(AIdFator node)
    {
        defaultIn(node);
    }

    public void outAIdFator(AIdFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdFator(AIdFator node)
    {
        inAIdFator(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdFator(node);
    }

    public void inANumFator(ANumFator node)
    {
        defaultIn(node);
    }

    public void outANumFator(ANumFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumFator(ANumFator node)
    {
        inANumFator(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumFator(node);
    }

    public void inAStrFator(AStrFator node)
    {
        defaultIn(node);
    }

    public void outAStrFator(AStrFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrFator(AStrFator node)
    {
        inAStrFator(node);
        if(node.getStr() != null)
        {
            node.getStr().apply(this);
        }
        outAStrFator(node);
    }

    public void inAFuncaoFator(AFuncaoFator node)
    {
        defaultIn(node);
    }

    public void outAFuncaoFator(AFuncaoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoFator(AFuncaoFator node)
    {
        inAFuncaoFator(node);
        if(node.getComandoFuncao() != null)
        {
            node.getComandoFuncao().apply(this);
        }
        outAFuncaoFator(node);
    }

    public void inAParFator(AParFator node)
    {
        defaultIn(node);
    }

    public void outAParFator(AParFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParFator(AParFator node)
    {
        inAParFator(node);
        if(node.getFPar() != null)
        {
            node.getFPar().apply(this);
        }
        if(node.getExpGeral() != null)
        {
            node.getExpGeral().apply(this);
        }
        if(node.getAPar() != null)
        {
            node.getAPar().apply(this);
        }
        outAParFator(node);
    }

    public void inAMaiorQueOpBool(AMaiorQueOpBool node)
    {
        defaultIn(node);
    }

    public void outAMaiorQueOpBool(AMaiorQueOpBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorQueOpBool(AMaiorQueOpBool node)
    {
        inAMaiorQueOpBool(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorQueOpBool(node);
    }

    public void inAMaiorOuIgualOpBool(AMaiorOuIgualOpBool node)
    {
        defaultIn(node);
    }

    public void outAMaiorOuIgualOpBool(AMaiorOuIgualOpBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorOuIgualOpBool(AMaiorOuIgualOpBool node)
    {
        inAMaiorOuIgualOpBool(node);
        if(node.getMaiorI() != null)
        {
            node.getMaiorI().apply(this);
        }
        outAMaiorOuIgualOpBool(node);
    }

    public void inAMenorQueOpBool(AMenorQueOpBool node)
    {
        defaultIn(node);
    }

    public void outAMenorQueOpBool(AMenorQueOpBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorQueOpBool(AMenorQueOpBool node)
    {
        inAMenorQueOpBool(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorQueOpBool(node);
    }

    public void inAMenorOuIgualOpBool(AMenorOuIgualOpBool node)
    {
        defaultIn(node);
    }

    public void outAMenorOuIgualOpBool(AMenorOuIgualOpBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorOuIgualOpBool(AMenorOuIgualOpBool node)
    {
        inAMenorOuIgualOpBool(node);
        if(node.getMenorI() != null)
        {
            node.getMenorI().apply(this);
        }
        outAMenorOuIgualOpBool(node);
    }

    public void inAIgualOpBool(AIgualOpBool node)
    {
        defaultIn(node);
    }

    public void outAIgualOpBool(AIgualOpBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualOpBool(AIgualOpBool node)
    {
        inAIgualOpBool(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAIgualOpBool(node);
    }

    public void inADiferenteOpBool(ADiferenteOpBool node)
    {
        defaultIn(node);
    }

    public void outADiferenteOpBool(ADiferenteOpBool node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteOpBool(ADiferenteOpBool node)
    {
        inADiferenteOpBool(node);
        if(node.getDif() != null)
        {
            node.getDif().apply(this);
        }
        outADiferenteOpBool(node);
    }

    public void inASomaOpSoma(ASomaOpSoma node)
    {
        defaultIn(node);
    }

    public void outASomaOpSoma(ASomaOpSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaOpSoma(ASomaOpSoma node)
    {
        inASomaOpSoma(node);
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        outASomaOpSoma(node);
    }

    public void inASubOpSoma(ASubOpSoma node)
    {
        defaultIn(node);
    }

    public void outASubOpSoma(ASubOpSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubOpSoma(ASubOpSoma node)
    {
        inASubOpSoma(node);
        if(node.getSub() != null)
        {
            node.getSub().apply(this);
        }
        outASubOpSoma(node);
    }

    public void inAMultOpMult(AMultOpMult node)
    {
        defaultIn(node);
    }

    public void outAMultOpMult(AMultOpMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultOpMult(AMultOpMult node)
    {
        inAMultOpMult(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultOpMult(node);
    }

    public void inADivOpMult(ADivOpMult node)
    {
        defaultIn(node);
    }

    public void outADivOpMult(ADivOpMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivOpMult(ADivOpMult node)
    {
        inADivOpMult(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivOpMult(node);
    }
}
