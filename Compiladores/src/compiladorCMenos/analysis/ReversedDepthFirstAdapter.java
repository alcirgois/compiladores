/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladorCMenos.analysis;

import java.util.*;
import compiladorCMenos.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        if(node.getFuncMain() != null)
        {
            node.getFuncMain().apply(this);
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDecls());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outAPrograma(node);
    }

    public void inAVarIntDeclaracao(AVarIntDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVarIntDeclaracao(AVarIntDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarIntDeclaracao(AVarIntDeclaracao node)
    {
        inAVarIntDeclaracao(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getDimens());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAVarIntDeclaracao(node);
    }

    public void inAVarStrDeclaracao(AVarStrDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVarStrDeclaracao(AVarStrDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarStrDeclaracao(AVarStrDeclaracao node)
    {
        inAVarStrDeclaracao(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getDimens());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAVarStrDeclaracao(node);
    }

    public void inAProcedDeclaracao(AProcedDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAProcedDeclaracao(AProcedDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProcedDeclaracao(AProcedDeclaracao node)
    {
        inAProcedDeclaracao(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getBloco());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PParametro> copy = new ArrayList<PParametro>(node.getPars());
            Collections.reverse(copy);
            for(PParametro e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAProcedDeclaracao(node);
    }

    public void inAFuncaoIntDeclaracao(AFuncaoIntDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoIntDeclaracao(AFuncaoIntDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoIntDeclaracao(AFuncaoIntDeclaracao node)
    {
        inAFuncaoIntDeclaracao(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getBloco());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PParametro> copy = new ArrayList<PParametro>(node.getPars());
            Collections.reverse(copy);
            for(PParametro e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAFuncaoIntDeclaracao(node);
    }

    public void inAFuncaoStrDeclaracao(AFuncaoStrDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAFuncaoStrDeclaracao(AFuncaoStrDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoStrDeclaracao(AFuncaoStrDeclaracao node)
    {
        inAFuncaoStrDeclaracao(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getBloco());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PParametro> copy = new ArrayList<PParametro>(node.getPars());
            Collections.reverse(copy);
            for(PParametro e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAFuncaoStrDeclaracao(node);
    }

    public void inAFuncaoMain(AFuncaoMain node)
    {
        defaultIn(node);
    }

    public void outAFuncaoMain(AFuncaoMain node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoMain(AFuncaoMain node)
    {
        inAFuncaoMain(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getBloco());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAFuncaoMain(node);
    }

    public void inAParamIntParametro(AParamIntParametro node)
    {
        defaultIn(node);
    }

    public void outAParamIntParametro(AParamIntParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamIntParametro(AParamIntParametro node)
    {
        inAParamIntParametro(node);
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        {
            List<TMult> copy = new ArrayList<TMult>(node.getDimens());
            Collections.reverse(copy);
            for(TMult e : copy)
            {
                e.apply(this);
            }
        }
        outAParamIntParametro(node);
    }

    public void inAParamStrParametro(AParamStrParametro node)
    {
        defaultIn(node);
    }

    public void outAParamStrParametro(AParamStrParametro node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamStrParametro(AParamStrParametro node)
    {
        inAParamStrParametro(node);
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        {
            List<TMult> copy = new ArrayList<TMult>(node.getDimens());
            Collections.reverse(copy);
            for(TMult e : copy)
            {
                e.apply(this);
            }
        }
        outAParamStrParametro(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outABlocoComando(node);
    }

    public void inADeclVarIntComando(ADeclVarIntComando node)
    {
        defaultIn(node);
    }

    public void outADeclVarIntComando(ADeclVarIntComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclVarIntComando(ADeclVarIntComando node)
    {
        inADeclVarIntComando(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getDimens());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outADeclVarIntComando(node);
    }

    public void inADeclVarStrComando(ADeclVarStrComando node)
    {
        defaultIn(node);
    }

    public void outADeclVarStrComando(ADeclVarStrComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclVarStrComando(ADeclVarStrComando node)
    {
        inADeclVarStrComando(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getDimens());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outADeclVarStrComando(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        {
            List<PExp> copy = new ArrayList<PExp>(node.getIndices());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inAFuncaoComando(AFuncaoComando node)
    {
        defaultIn(node);
    }

    public void outAFuncaoComando(AFuncaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoComando(AFuncaoComando node)
    {
        inAFuncaoComando(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getArgs());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAFuncaoComando(node);
    }

    public void inARetornoComando(ARetornoComando node)
    {
        defaultIn(node);
    }

    public void outARetornoComando(ARetornoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARetornoComando(ARetornoComando node)
    {
        inARetornoComando(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outARetornoComando(node);
    }

    public void inARepeticaoComando(ARepeticaoComando node)
    {
        defaultIn(node);
    }

    public void outARepeticaoComando(ARepeticaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeticaoComando(ARepeticaoComando node)
    {
        inARepeticaoComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        if(node.getTeste() != null)
        {
            node.getTeste().apply(this);
        }
        outARepeticaoComando(node);
    }

    public void inACondicaoComando(ACondicaoComando node)
    {
        defaultIn(node);
    }

    public void outACondicaoComando(ACondicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicaoComando(ACondicaoComando node)
    {
        inACondicaoComando(node);
        if(node.getBlocoThen() != null)
        {
            node.getBlocoThen().apply(this);
        }
        if(node.getTeste() != null)
        {
            node.getTeste().apply(this);
        }
        outACondicaoComando(node);
    }

    public void inACondicaoIfElseComando(ACondicaoIfElseComando node)
    {
        defaultIn(node);
    }

    public void outACondicaoIfElseComando(ACondicaoIfElseComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicaoIfElseComando(ACondicaoIfElseComando node)
    {
        inACondicaoIfElseComando(node);
        if(node.getBlocoElse() != null)
        {
            node.getBlocoElse().apply(this);
        }
        if(node.getBlocoThen() != null)
        {
            node.getBlocoThen().apply(this);
        }
        if(node.getTeste() != null)
        {
            node.getTeste().apply(this);
        }
        outACondicaoIfElseComando(node);
    }

    public void inAMaiorQueExp(AMaiorQueExp node)
    {
        defaultIn(node);
    }

    public void outAMaiorQueExp(AMaiorQueExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorQueExp(AMaiorQueExp node)
    {
        inAMaiorQueExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAMaiorQueExp(node);
    }

    public void inAMaiorIgualExp(AMaiorIgualExp node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualExp(AMaiorIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualExp(AMaiorIgualExp node)
    {
        inAMaiorIgualExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAMaiorIgualExp(node);
    }

    public void inAMenorQueExp(AMenorQueExp node)
    {
        defaultIn(node);
    }

    public void outAMenorQueExp(AMenorQueExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorQueExp(AMenorQueExp node)
    {
        inAMenorQueExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAMenorQueExp(node);
    }

    public void inAMenorIgualExp(AMenorIgualExp node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExp(AMenorIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExp(AMenorIgualExp node)
    {
        inAMenorIgualExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAMenorIgualExp(node);
    }

    public void inAIgualExp(AIgualExp node)
    {
        defaultIn(node);
    }

    public void outAIgualExp(AIgualExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExp(AIgualExp node)
    {
        inAIgualExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAIgualExp(node);
    }

    public void inADiferenteExp(ADiferenteExp node)
    {
        defaultIn(node);
    }

    public void outADiferenteExp(ADiferenteExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExp(ADiferenteExp node)
    {
        inADiferenteExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outADiferenteExp(node);
    }

    public void inASomaExp(ASomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaExp(ASomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExp(ASomaExp node)
    {
        inASomaExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outASomaExp(node);
    }

    public void inASubExp(ASubExp node)
    {
        defaultIn(node);
    }

    public void outASubExp(ASubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExp(ASubExp node)
    {
        inASubExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outASubExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outADivExp(node);
    }

    public void inAVarExp(AVarExp node)
    {
        defaultIn(node);
    }

    public void outAVarExp(AVarExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        inAVarExp(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getIndices());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAVarExp(node);
    }

    public void inANumExp(ANumExp node)
    {
        defaultIn(node);
    }

    public void outANumExp(ANumExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumExp(ANumExp node)
    {
        inANumExp(node);
        if(node.getNum() != null)
        {
            node.getNum().apply(this);
        }
        outANumExp(node);
    }

    public void inAStrExp(AStrExp node)
    {
        defaultIn(node);
    }

    public void outAStrExp(AStrExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrExp(AStrExp node)
    {
        inAStrExp(node);
        if(node.getStr() != null)
        {
            node.getStr().apply(this);
        }
        outAStrExp(node);
    }

    public void inAFuncaoExp(AFuncaoExp node)
    {
        defaultIn(node);
    }

    public void outAFuncaoExp(AFuncaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncaoExp(AFuncaoExp node)
    {
        inAFuncaoExp(node);
        {
            List<PExp> copy = new ArrayList<PExp>(node.getArgs());
            Collections.reverse(copy);
            for(PExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAFuncaoExp(node);
    }
}
