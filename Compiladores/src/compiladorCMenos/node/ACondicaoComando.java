/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladorCMenos.node;

import compiladorCMenos.analysis.*;

@SuppressWarnings("nls")
public final class ACondicaoComando extends PComando
{
    private PExp _teste_;
    private PComando _blocoThen_;
    private PComando _blocoElse_;

    public ACondicaoComando()
    {
        // Constructor
    }

    public ACondicaoComando(
        @SuppressWarnings("hiding") PExp _teste_,
        @SuppressWarnings("hiding") PComando _blocoThen_,
        @SuppressWarnings("hiding") PComando _blocoElse_)
    {
        // Constructor
        setTeste(_teste_);

        setBlocoThen(_blocoThen_);

        setBlocoElse(_blocoElse_);

    }

    @Override
    public Object clone()
    {
        return new ACondicaoComando(
            cloneNode(this._teste_),
            cloneNode(this._blocoThen_),
            cloneNode(this._blocoElse_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACondicaoComando(this);
    }

    public PExp getTeste()
    {
        return this._teste_;
    }

    public void setTeste(PExp node)
    {
        if(this._teste_ != null)
        {
            this._teste_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._teste_ = node;
    }

    public PComando getBlocoThen()
    {
        return this._blocoThen_;
    }

    public void setBlocoThen(PComando node)
    {
        if(this._blocoThen_ != null)
        {
            this._blocoThen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._blocoThen_ = node;
    }

    public PComando getBlocoElse()
    {
        return this._blocoElse_;
    }

    public void setBlocoElse(PComando node)
    {
        if(this._blocoElse_ != null)
        {
            this._blocoElse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._blocoElse_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._teste_)
            + toString(this._blocoThen_)
            + toString(this._blocoElse_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._teste_ == child)
        {
            this._teste_ = null;
            return;
        }

        if(this._blocoThen_ == child)
        {
            this._blocoThen_ = null;
            return;
        }

        if(this._blocoElse_ == child)
        {
            this._blocoElse_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._teste_ == oldChild)
        {
            setTeste((PExp) newChild);
            return;
        }

        if(this._blocoThen_ == oldChild)
        {
            setBlocoThen((PComando) newChild);
            return;
        }

        if(this._blocoElse_ == oldChild)
        {
            setBlocoElse((PComando) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
