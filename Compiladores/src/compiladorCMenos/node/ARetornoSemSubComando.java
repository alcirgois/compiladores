/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladorCMenos.node;

import compiladorCMenos.analysis.*;

@SuppressWarnings("nls")
public final class ARetornoSemSubComando extends PSemSubComando
{
    private PComandoRetorno _comandoRetorno_;
    private TPVirg _pVirg_;

    public ARetornoSemSubComando()
    {
        // Constructor
    }

    public ARetornoSemSubComando(
        @SuppressWarnings("hiding") PComandoRetorno _comandoRetorno_,
        @SuppressWarnings("hiding") TPVirg _pVirg_)
    {
        // Constructor
        setComandoRetorno(_comandoRetorno_);

        setPVirg(_pVirg_);

    }

    @Override
    public Object clone()
    {
        return new ARetornoSemSubComando(
            cloneNode(this._comandoRetorno_),
            cloneNode(this._pVirg_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARetornoSemSubComando(this);
    }

    public PComandoRetorno getComandoRetorno()
    {
        return this._comandoRetorno_;
    }

    public void setComandoRetorno(PComandoRetorno node)
    {
        if(this._comandoRetorno_ != null)
        {
            this._comandoRetorno_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comandoRetorno_ = node;
    }

    public TPVirg getPVirg()
    {
        return this._pVirg_;
    }

    public void setPVirg(TPVirg node)
    {
        if(this._pVirg_ != null)
        {
            this._pVirg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pVirg_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comandoRetorno_)
            + toString(this._pVirg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comandoRetorno_ == child)
        {
            this._comandoRetorno_ = null;
            return;
        }

        if(this._pVirg_ == child)
        {
            this._pVirg_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._comandoRetorno_ == oldChild)
        {
            setComandoRetorno((PComandoRetorno) newChild);
            return;
        }

        if(this._pVirg_ == oldChild)
        {
            setPVirg((TPVirg) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
