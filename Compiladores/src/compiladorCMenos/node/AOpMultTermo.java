/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladorCMenos.node;

import compiladorCMenos.analysis.*;

@SuppressWarnings("nls")
public final class AOpMultTermo extends PTermo
{
    private PTermo _esq_;
    private POpMult _opMult_;
    private PFator _dir_;

    public AOpMultTermo()
    {
        // Constructor
    }

    public AOpMultTermo(
        @SuppressWarnings("hiding") PTermo _esq_,
        @SuppressWarnings("hiding") POpMult _opMult_,
        @SuppressWarnings("hiding") PFator _dir_)
    {
        // Constructor
        setEsq(_esq_);

        setOpMult(_opMult_);

        setDir(_dir_);

    }

    @Override
    public Object clone()
    {
        return new AOpMultTermo(
            cloneNode(this._esq_),
            cloneNode(this._opMult_),
            cloneNode(this._dir_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOpMultTermo(this);
    }

    public PTermo getEsq()
    {
        return this._esq_;
    }

    public void setEsq(PTermo node)
    {
        if(this._esq_ != null)
        {
            this._esq_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._esq_ = node;
    }

    public POpMult getOpMult()
    {
        return this._opMult_;
    }

    public void setOpMult(POpMult node)
    {
        if(this._opMult_ != null)
        {
            this._opMult_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opMult_ = node;
    }

    public PFator getDir()
    {
        return this._dir_;
    }

    public void setDir(PFator node)
    {
        if(this._dir_ != null)
        {
            this._dir_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dir_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._esq_)
            + toString(this._opMult_)
            + toString(this._dir_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._esq_ == child)
        {
            this._esq_ = null;
            return;
        }

        if(this._opMult_ == child)
        {
            this._opMult_ = null;
            return;
        }

        if(this._dir_ == child)
        {
            this._dir_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._esq_ == oldChild)
        {
            setEsq((PTermo) newChild);
            return;
        }

        if(this._opMult_ == oldChild)
        {
            setOpMult((POpMult) newChild);
            return;
        }

        if(this._dir_ == oldChild)
        {
            setDir((PFator) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
