/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladorCMenos.node;

import compiladorCMenos.analysis.*;

@SuppressWarnings("nls")
public final class AComandoFuncao extends PComandoFuncao
{
    private TId _id_;
    private TAPar _aPar_;
    private PSeqParametro _seqParametro_;
    private TFPar _fPar_;

    public AComandoFuncao()
    {
        // Constructor
    }

    public AComandoFuncao(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TAPar _aPar_,
        @SuppressWarnings("hiding") PSeqParametro _seqParametro_,
        @SuppressWarnings("hiding") TFPar _fPar_)
    {
        // Constructor
        setId(_id_);

        setAPar(_aPar_);

        setSeqParametro(_seqParametro_);

        setFPar(_fPar_);

    }

    @Override
    public Object clone()
    {
        return new AComandoFuncao(
            cloneNode(this._id_),
            cloneNode(this._aPar_),
            cloneNode(this._seqParametro_),
            cloneNode(this._fPar_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComandoFuncao(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TAPar getAPar()
    {
        return this._aPar_;
    }

    public void setAPar(TAPar node)
    {
        if(this._aPar_ != null)
        {
            this._aPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._aPar_ = node;
    }

    public PSeqParametro getSeqParametro()
    {
        return this._seqParametro_;
    }

    public void setSeqParametro(PSeqParametro node)
    {
        if(this._seqParametro_ != null)
        {
            this._seqParametro_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._seqParametro_ = node;
    }

    public TFPar getFPar()
    {
        return this._fPar_;
    }

    public void setFPar(TFPar node)
    {
        if(this._fPar_ != null)
        {
            this._fPar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fPar_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._aPar_)
            + toString(this._seqParametro_)
            + toString(this._fPar_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._aPar_ == child)
        {
            this._aPar_ = null;
            return;
        }

        if(this._seqParametro_ == child)
        {
            this._seqParametro_ = null;
            return;
        }

        if(this._fPar_ == child)
        {
            this._fPar_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._aPar_ == oldChild)
        {
            setAPar((TAPar) newChild);
            return;
        }

        if(this._seqParametro_ == oldChild)
        {
            setSeqParametro((PSeqParametro) newChild);
            return;
        }

        if(this._fPar_ == oldChild)
        {
            setFPar((TFPar) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
