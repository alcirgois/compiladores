/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiladorCMenos.parser;

import compiladorCMenos.lexer.*;
import compiladorCMenos.node.*;
import compiladorCMenos.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprograma1Programa */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAprograma2$1Programa */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce A1DeclFuncaoMain */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AVariavelDeclaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AFuncaoDeclaracao */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AVariavelDeclVariavel */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce AMatrizDeclVariavel */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AAnormaldeclfuncao1$Valorado1DeclFuncao */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce AAnormaldeclfuncao1$Avalorado1$1DeclFuncao */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce AAnormaldeclfuncao2$Valorado1DeclFuncao */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AAnormaldeclfuncao2$Avalorado1$1DeclFuncao */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce ASemParametro$Valorado1$1DeclFuncao */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce ASemParametro$Avalorado1$1$2DeclFuncao */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce AIntTipoValorado */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce AStringTipoValorado */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce AListaSeqDeclParametro */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce AUnicoSeqDeclParametro */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AVariavelDeclParametro */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce AMatrizDeclParametro */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce AAbloco1Bloco */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list);
            }
            break;
            case 20: /* reduce AAbloco2Bloco */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce ASeqComando */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list);
            }
            break;
            case 22: /* reduce ASemSubComandoComando */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list);
            }
            break;
            case 23: /* reduce ARepeticaoComando */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list);
            }
            break;
            case 24: /* reduce ACondicaoComando */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list);
            }
            break;
            case 25: /* reduce ACondicaoElseComando */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list);
            }
            break;
            case 26: /* reduce ASemSubComandoComandoIfNaoCurto */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list);
            }
            break;
            case 27: /* reduce ARepeticaoIfNaoCurtoComandoIfNaoCurto */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list);
            }
            break;
            case 28: /* reduce ACondicaoElseIfNaoCurtoComandoIfNaoCurto */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce ABlocoSemSubComando */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list);
            }
            break;
            case 30: /* reduce ADeclaracaoSemSubComando */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list);
            }
            break;
            case 31: /* reduce AAtribuicaoSemSubComando */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list);
            }
            break;
            case 32: /* reduce AFuncaoSemSubComando */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce ARetornoSemSubComando */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list);
            }
            break;
            case 34: /* reduce AVariavelComandoAtribuicao */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list);
            }
            break;
            case 35: /* reduce AMatrizComandoAtribuicao */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce AComandoRepeticao */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list);
            }
            break;
            case 37: /* reduce AComandoCondicao */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list);
            }
            break;
            case 38: /* reduce AComandoCondicaoElse */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list);
            }
            break;
            case 39: /* reduce AComandoRepeticaoIfNaoCurto */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list);
            }
            break;
            case 40: /* reduce AComandoCondicaoElseIfNaoCurto */
            {
                ArrayList<Object> list = new40();
                push(goTo(18), list);
            }
            break;
            case 41: /* reduce AAcomandofuncao1ComandoFuncao */
            {
                ArrayList<Object> list = new41();
                push(goTo(19), list);
            }
            break;
            case 42: /* reduce AAcomandofuncao2ComandoFuncao */
            {
                ArrayList<Object> list = new42();
                push(goTo(19), list);
            }
            break;
            case 43: /* reduce AListaSeqParametro */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list);
            }
            break;
            case 44: /* reduce AUnicoSeqParametro */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list);
            }
            break;
            case 45: /* reduce AComandoRetorno */
            {
                ArrayList<Object> list = new45();
                push(goTo(21), list);
            }
            break;
            case 46: /* reduce AOpBoolExpGeral */
            {
                ArrayList<Object> list = new46();
                push(goTo(22), list);
            }
            break;
            case 47: /* reduce AExpExpGeral */
            {
                ArrayList<Object> list = new47();
                push(goTo(22), list);
            }
            break;
            case 48: /* reduce AOpSomaExp */
            {
                ArrayList<Object> list = new48();
                push(goTo(23), list);
            }
            break;
            case 49: /* reduce ATermoExp */
            {
                ArrayList<Object> list = new49();
                push(goTo(23), list);
            }
            break;
            case 50: /* reduce AOpMultTermo */
            {
                ArrayList<Object> list = new50();
                push(goTo(24), list);
            }
            break;
            case 51: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new51();
                push(goTo(24), list);
            }
            break;
            case 52: /* reduce AIdFator */
            {
                ArrayList<Object> list = new52();
                push(goTo(25), list);
            }
            break;
            case 53: /* reduce ANumFator */
            {
                ArrayList<Object> list = new53();
                push(goTo(25), list);
            }
            break;
            case 54: /* reduce AStrFator */
            {
                ArrayList<Object> list = new54();
                push(goTo(25), list);
            }
            break;
            case 55: /* reduce AFuncaoFator */
            {
                ArrayList<Object> list = new55();
                push(goTo(25), list);
            }
            break;
            case 56: /* reduce AParFator */
            {
                ArrayList<Object> list = new56();
                push(goTo(25), list);
            }
            break;
            case 57: /* reduce AMaiorQueOpBool */
            {
                ArrayList<Object> list = new57();
                push(goTo(26), list);
            }
            break;
            case 58: /* reduce AMaiorOuIgualOpBool */
            {
                ArrayList<Object> list = new58();
                push(goTo(26), list);
            }
            break;
            case 59: /* reduce AMenorQueOpBool */
            {
                ArrayList<Object> list = new59();
                push(goTo(26), list);
            }
            break;
            case 60: /* reduce AMenorOuIgualOpBool */
            {
                ArrayList<Object> list = new60();
                push(goTo(26), list);
            }
            break;
            case 61: /* reduce AIgualOpBool */
            {
                ArrayList<Object> list = new61();
                push(goTo(26), list);
            }
            break;
            case 62: /* reduce ADiferenteOpBool */
            {
                ArrayList<Object> list = new62();
                push(goTo(26), list);
            }
            break;
            case 63: /* reduce ASomaOpSoma */
            {
                ArrayList<Object> list = new63();
                push(goTo(27), list);
            }
            break;
            case 64: /* reduce ASubOpSoma */
            {
                ArrayList<Object> list = new64();
                push(goTo(27), list);
            }
            break;
            case 65: /* reduce AMultOpMult */
            {
                ArrayList<Object> list = new65();
                push(goTo(28), list);
            }
            break;
            case 66: /* reduce ADivOpMult */
            {
                ArrayList<Object> list = new66();
                push(goTo(28), list);
            }
            break;
            case 67: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new67();
                push(goTo(29), list);
            }
            break;
            case 68: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new68();
                push(goTo(29), list);
            }
            break;
            case 69: /* reduce ATerminal$Mult */
            {
                ArrayList<Object> list = new69();
                push(goTo(30), list);
            }
            break;
            case 70: /* reduce ANonTerminal$Mult */
            {
                ArrayList<Object> list = new70();
                push(goTo(30), list);
            }
            break;
            case 71: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new71();
                push(goTo(31), list);
            }
            break;
            case 72: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new72();
                push(goTo(31), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprograma1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PDeclFuncaoMain pdeclfuncaomainNode3;
        pdeclfuncaomainNode3 = (PDeclFuncaoMain)nodeArrayList1.get(0);

        pprogramaNode1 = new APrograma(null, pdeclfuncaomainNode3);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprograma2$1Programa */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PSeqDeclaracao pseqdeclaracaoNode2;
        PDeclFuncaoMain pdeclfuncaomainNode5;
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList1.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pseqdeclaracaoNode2 = new ASeqDeclaracao(listNode4);
        }
        pdeclfuncaomainNode5 = (PDeclFuncaoMain)nodeArrayList2.get(0);

        pprogramaNode1 = new APrograma(pseqdeclaracaoNode2, pdeclfuncaomainNode5);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce A1DeclFuncaoMain */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclFuncaoMain pdeclfuncaomainNode1;
        {
            // Block
        PTipoAvalorado ptipoavaloradoNode2;
        TId tidNode4;
        TAPar taparNode5;
        TPChaveVoid tpchavevoidNode6;
        TFPar tfparNode7;
        PBloco pblocoNode8;
        {
            // Block
        TPChaveVoid tpchavevoidNode3;
        tpchavevoidNode3 = (TPChaveVoid)nodeArrayList1.get(0);

        ptipoavaloradoNode2 = new ATipoAvalorado(tpchavevoidNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        taparNode5 = (TAPar)nodeArrayList3.get(0);
        tpchavevoidNode6 = (TPChaveVoid)nodeArrayList4.get(0);
        tfparNode7 = (TFPar)nodeArrayList5.get(0);
        pblocoNode8 = (PBloco)nodeArrayList6.get(0);

        pdeclfuncaomainNode1 = new ADeclFuncaoMain(ptipoavaloradoNode2, tidNode4, taparNode5, tpchavevoidNode6, tfparNode7, pblocoNode8);
        }
	nodeList.add(pdeclfuncaomainNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AVariavelDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PDeclVariavel pdeclvariavelNode2;
        TPVirg tpvirgNode3;
        pdeclvariavelNode2 = (PDeclVariavel)nodeArrayList1.get(0);
        tpvirgNode3 = (TPVirg)nodeArrayList2.get(0);

        pdeclaracaoNode1 = new AVariavelDeclaracao(pdeclvariavelNode2, tpvirgNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AFuncaoDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PDeclFuncao pdeclfuncaoNode2;
        pdeclfuncaoNode2 = (PDeclFuncao)nodeArrayList1.get(0);

        pdeclaracaoNode1 = new AFuncaoDeclaracao(pdeclfuncaoNode2);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AVariavelDeclVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclVariavel pdeclvariavelNode1;
        {
            // Block
        PTipoValorado ptipovaloradoNode2;
        TId tidNode3;
        ptipovaloradoNode2 = (PTipoValorado)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pdeclvariavelNode1 = new AVariavelDeclVariavel(ptipovaloradoNode2, tidNode3);
        }
	nodeList.add(pdeclvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AMatrizDeclVariavel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclVariavel pdeclvariavelNode1;
        {
            // Block
        PTipoValorado ptipovaloradoNode2;
        TId tidNode3;
        TACol tacolNode4;
        PSeqParametro pseqparametroNode5;
        TFCol tfcolNode6;
        ptipovaloradoNode2 = (PTipoValorado)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tacolNode4 = (TACol)nodeArrayList3.get(0);
        pseqparametroNode5 = (PSeqParametro)nodeArrayList4.get(0);
        tfcolNode6 = (TFCol)nodeArrayList5.get(0);

        pdeclvariavelNode1 = new AMatrizDeclVariavel(ptipovaloradoNode2, tidNode3, tacolNode4, pseqparametroNode5, tfcolNode6);
        }
	nodeList.add(pdeclvariavelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAnormaldeclfuncao1$Valorado1DeclFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclFuncao pdeclfuncaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode4;
        TAPar taparNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TFPar tfparNode7;
        PBloco pblocoNode8;
        {
            // Block
        PTipoValorado ptipovaloradoNode3;
        ptipovaloradoNode3 = (PTipoValorado)nodeArrayList1.get(0);

        ptipoNode2 = new AValoradoTipo(ptipovaloradoNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        taparNode5 = (TAPar)nodeArrayList3.get(0);
        tfparNode7 = (TFPar)nodeArrayList4.get(0);
        pblocoNode8 = (PBloco)nodeArrayList5.get(0);

        pdeclfuncaoNode1 = new ANormalDeclFuncao(ptipoNode2, tidNode4, taparNode5, null, tfparNode7, pblocoNode8);
        }
	nodeList.add(pdeclfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAnormaldeclfuncao1$Avalorado1$1DeclFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclFuncao pdeclfuncaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode5;
        TAPar taparNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        TFPar tfparNode8;
        PBloco pblocoNode9;
        {
            // Block
        PTipoAvalorado ptipoavaloradoNode3;
        {
            // Block
        TPChaveVoid tpchavevoidNode4;
        tpchavevoidNode4 = (TPChaveVoid)nodeArrayList1.get(0);

        ptipoavaloradoNode3 = new ATipoAvalorado(tpchavevoidNode4);
        }

        ptipoNode2 = new AAvaloradoTipo(ptipoavaloradoNode3);
        }
        tidNode5 = (TId)nodeArrayList2.get(0);
        taparNode6 = (TAPar)nodeArrayList3.get(0);
        tfparNode8 = (TFPar)nodeArrayList4.get(0);
        pblocoNode9 = (PBloco)nodeArrayList5.get(0);

        pdeclfuncaoNode1 = new ANormalDeclFuncao(ptipoNode2, tidNode5, taparNode6, null, tfparNode8, pblocoNode9);
        }
	nodeList.add(pdeclfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAnormaldeclfuncao2$Valorado1DeclFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclFuncao pdeclfuncaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode4;
        TAPar taparNode5;
        PSeqDeclParametro pseqdeclparametroNode6;
        TFPar tfparNode7;
        PBloco pblocoNode8;
        {
            // Block
        PTipoValorado ptipovaloradoNode3;
        ptipovaloradoNode3 = (PTipoValorado)nodeArrayList1.get(0);

        ptipoNode2 = new AValoradoTipo(ptipovaloradoNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        taparNode5 = (TAPar)nodeArrayList3.get(0);
        pseqdeclparametroNode6 = (PSeqDeclParametro)nodeArrayList4.get(0);
        tfparNode7 = (TFPar)nodeArrayList5.get(0);
        pblocoNode8 = (PBloco)nodeArrayList6.get(0);

        pdeclfuncaoNode1 = new ANormalDeclFuncao(ptipoNode2, tidNode4, taparNode5, pseqdeclparametroNode6, tfparNode7, pblocoNode8);
        }
	nodeList.add(pdeclfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAnormaldeclfuncao2$Avalorado1$1DeclFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclFuncao pdeclfuncaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode5;
        TAPar taparNode6;
        PSeqDeclParametro pseqdeclparametroNode7;
        TFPar tfparNode8;
        PBloco pblocoNode9;
        {
            // Block
        PTipoAvalorado ptipoavaloradoNode3;
        {
            // Block
        TPChaveVoid tpchavevoidNode4;
        tpchavevoidNode4 = (TPChaveVoid)nodeArrayList1.get(0);

        ptipoavaloradoNode3 = new ATipoAvalorado(tpchavevoidNode4);
        }

        ptipoNode2 = new AAvaloradoTipo(ptipoavaloradoNode3);
        }
        tidNode5 = (TId)nodeArrayList2.get(0);
        taparNode6 = (TAPar)nodeArrayList3.get(0);
        pseqdeclparametroNode7 = (PSeqDeclParametro)nodeArrayList4.get(0);
        tfparNode8 = (TFPar)nodeArrayList5.get(0);
        pblocoNode9 = (PBloco)nodeArrayList6.get(0);

        pdeclfuncaoNode1 = new ANormalDeclFuncao(ptipoNode2, tidNode5, taparNode6, pseqdeclparametroNode7, tfparNode8, pblocoNode9);
        }
	nodeList.add(pdeclfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ASemParametro$Valorado1$1DeclFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclFuncao pdeclfuncaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode4;
        TAPar taparNode5;
        PTipoAvalorado ptipoavaloradoNode6;
        TFPar tfparNode8;
        PBloco pblocoNode9;
        {
            // Block
        PTipoValorado ptipovaloradoNode3;
        ptipovaloradoNode3 = (PTipoValorado)nodeArrayList1.get(0);

        ptipoNode2 = new AValoradoTipo(ptipovaloradoNode3);
        }
        tidNode4 = (TId)nodeArrayList2.get(0);
        taparNode5 = (TAPar)nodeArrayList3.get(0);
        {
            // Block
        TPChaveVoid tpchavevoidNode7;
        tpchavevoidNode7 = (TPChaveVoid)nodeArrayList4.get(0);

        ptipoavaloradoNode6 = new ATipoAvalorado(tpchavevoidNode7);
        }
        tfparNode8 = (TFPar)nodeArrayList5.get(0);
        pblocoNode9 = (PBloco)nodeArrayList6.get(0);

        pdeclfuncaoNode1 = new ASemParametroDeclFuncao(ptipoNode2, tidNode4, taparNode5, ptipoavaloradoNode6, tfparNode8, pblocoNode9);
        }
	nodeList.add(pdeclfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASemParametro$Avalorado1$1$2DeclFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclFuncao pdeclfuncaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TId tidNode5;
        TAPar taparNode6;
        PTipoAvalorado ptipoavaloradoNode7;
        TFPar tfparNode9;
        PBloco pblocoNode10;
        {
            // Block
        PTipoAvalorado ptipoavaloradoNode3;
        {
            // Block
        TPChaveVoid tpchavevoidNode4;
        tpchavevoidNode4 = (TPChaveVoid)nodeArrayList1.get(0);

        ptipoavaloradoNode3 = new ATipoAvalorado(tpchavevoidNode4);
        }

        ptipoNode2 = new AAvaloradoTipo(ptipoavaloradoNode3);
        }
        tidNode5 = (TId)nodeArrayList2.get(0);
        taparNode6 = (TAPar)nodeArrayList3.get(0);
        {
            // Block
        TPChaveVoid tpchavevoidNode8;
        tpchavevoidNode8 = (TPChaveVoid)nodeArrayList4.get(0);

        ptipoavaloradoNode7 = new ATipoAvalorado(tpchavevoidNode8);
        }
        tfparNode9 = (TFPar)nodeArrayList5.get(0);
        pblocoNode10 = (PBloco)nodeArrayList6.get(0);

        pdeclfuncaoNode1 = new ASemParametroDeclFuncao(ptipoNode2, tidNode5, taparNode6, ptipoavaloradoNode7, tfparNode9, pblocoNode10);
        }
	nodeList.add(pdeclfuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIntTipoValorado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoValorado ptipovaloradoNode1;
        {
            // Block
        TPChaveInt tpchaveintNode2;
        tpchaveintNode2 = (TPChaveInt)nodeArrayList1.get(0);

        ptipovaloradoNode1 = new AIntTipoValorado(tpchaveintNode2);
        }
	nodeList.add(ptipovaloradoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AStringTipoValorado */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoValorado ptipovaloradoNode1;
        {
            // Block
        TPChaveString tpchavestringNode2;
        tpchavestringNode2 = (TPChaveString)nodeArrayList1.get(0);

        ptipovaloradoNode1 = new AStringTipoValorado(tpchavestringNode2);
        }
	nodeList.add(ptipovaloradoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AListaSeqDeclParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSeqDeclParametro pseqdeclparametroNode1;
        {
            // Block
        PSeqDeclParametro pseqdeclparametroNode2;
        TVirg tvirgNode3;
        PDeclParametro pdeclparametroNode4;
        pseqdeclparametroNode2 = (PSeqDeclParametro)nodeArrayList1.get(0);
        tvirgNode3 = (TVirg)nodeArrayList2.get(0);
        pdeclparametroNode4 = (PDeclParametro)nodeArrayList3.get(0);

        pseqdeclparametroNode1 = new AListaSeqDeclParametro(pseqdeclparametroNode2, tvirgNode3, pdeclparametroNode4);
        }
	nodeList.add(pseqdeclparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AUnicoSeqDeclParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSeqDeclParametro pseqdeclparametroNode1;
        {
            // Block
        PDeclParametro pdeclparametroNode2;
        pdeclparametroNode2 = (PDeclParametro)nodeArrayList1.get(0);

        pseqdeclparametroNode1 = new AUnicoSeqDeclParametro(pdeclparametroNode2);
        }
	nodeList.add(pseqdeclparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AVariavelDeclParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclParametro pdeclparametroNode1;
        {
            // Block
        PTipoValorado ptipovaloradoNode2;
        TId tidNode3;
        ptipovaloradoNode2 = (PTipoValorado)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pdeclparametroNode1 = new AVariavelDeclParametro(ptipovaloradoNode2, tidNode3);
        }
	nodeList.add(pdeclparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AMatrizDeclParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclParametro pdeclparametroNode1;
        {
            // Block
        PTipoValorado ptipovaloradoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TId tidNode5;
        ptipovaloradoNode2 = (PTipoValorado)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tidNode5 = (TId)nodeArrayList3.get(0);

        pdeclparametroNode1 = new AMatrizDeclParametro(ptipovaloradoNode2, listNode4, tidNode5);
        }
	nodeList.add(pdeclparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAbloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TAChave tachaveNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TFChave tfchaveNode4;
        tachaveNode2 = (TAChave)nodeArrayList1.get(0);
        tfchaveNode4 = (TFChave)nodeArrayList2.get(0);

        pblocoNode1 = new ABloco(tachaveNode2, null, tfchaveNode4);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAbloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TAChave tachaveNode2;
        PSeqComando pseqcomandoNode3;
        TFChave tfchaveNode4;
        tachaveNode2 = (TAChave)nodeArrayList1.get(0);
        pseqcomandoNode3 = (PSeqComando)nodeArrayList2.get(0);
        tfchaveNode4 = (TFChave)nodeArrayList3.get(0);

        pblocoNode1 = new ABloco(tachaveNode2, pseqcomandoNode3, tfchaveNode4);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ASeqComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSeqComando pseqcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pseqcomandoNode1 = new ASeqComando(listNode3);
        }
	nodeList.add(pseqcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASemSubComandoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PSemSubComando psemsubcomandoNode2;
        psemsubcomandoNode2 = (PSemSubComando)nodeArrayList1.get(0);

        pcomandoNode1 = new ASemSubComandoComando(psemsubcomandoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ARepeticaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandoRepeticao pcomandorepeticaoNode2;
        pcomandorepeticaoNode2 = (PComandoRepeticao)nodeArrayList1.get(0);

        pcomandoNode1 = new ARepeticaoComando(pcomandorepeticaoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ACondicaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandoCondicao pcomandocondicaoNode2;
        pcomandocondicaoNode2 = (PComandoCondicao)nodeArrayList1.get(0);

        pcomandoNode1 = new ACondicaoComando(pcomandocondicaoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ACondicaoElseComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandoCondicaoElse pcomandocondicaoelseNode2;
        pcomandocondicaoelseNode2 = (PComandoCondicaoElse)nodeArrayList1.get(0);

        pcomandoNode1 = new ACondicaoElseComando(pcomandocondicaoelseNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ASemSubComandoComandoIfNaoCurto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoIfNaoCurto pcomandoifnaocurtoNode1;
        {
            // Block
        PSemSubComando psemsubcomandoNode2;
        psemsubcomandoNode2 = (PSemSubComando)nodeArrayList1.get(0);

        pcomandoifnaocurtoNode1 = new ASemSubComandoComandoIfNaoCurto(psemsubcomandoNode2);
        }
	nodeList.add(pcomandoifnaocurtoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ARepeticaoIfNaoCurtoComandoIfNaoCurto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoIfNaoCurto pcomandoifnaocurtoNode1;
        {
            // Block
        PComandoRepeticaoIfNaoCurto pcomandorepeticaoifnaocurtoNode2;
        pcomandorepeticaoifnaocurtoNode2 = (PComandoRepeticaoIfNaoCurto)nodeArrayList1.get(0);

        pcomandoifnaocurtoNode1 = new ARepeticaoIfNaoCurtoComandoIfNaoCurto(pcomandorepeticaoifnaocurtoNode2);
        }
	nodeList.add(pcomandoifnaocurtoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACondicaoElseIfNaoCurtoComandoIfNaoCurto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoIfNaoCurto pcomandoifnaocurtoNode1;
        {
            // Block
        PComandoCondicaoElseIfNaoCurto pcomandocondicaoelseifnaocurtoNode2;
        pcomandocondicaoelseifnaocurtoNode2 = (PComandoCondicaoElseIfNaoCurto)nodeArrayList1.get(0);

        pcomandoifnaocurtoNode1 = new ACondicaoElseIfNaoCurtoComandoIfNaoCurto(pcomandocondicaoelseifnaocurtoNode2);
        }
	nodeList.add(pcomandoifnaocurtoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ABlocoSemSubComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSemSubComando psemsubcomandoNode1;
        {
            // Block
        PBloco pblocoNode2;
        pblocoNode2 = (PBloco)nodeArrayList1.get(0);

        psemsubcomandoNode1 = new ABlocoSemSubComando(pblocoNode2);
        }
	nodeList.add(psemsubcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ADeclaracaoSemSubComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSemSubComando psemsubcomandoNode1;
        {
            // Block
        PDeclVariavel pdeclvariavelNode2;
        TPVirg tpvirgNode3;
        pdeclvariavelNode2 = (PDeclVariavel)nodeArrayList1.get(0);
        tpvirgNode3 = (TPVirg)nodeArrayList2.get(0);

        psemsubcomandoNode1 = new ADeclaracaoSemSubComando(pdeclvariavelNode2, tpvirgNode3);
        }
	nodeList.add(psemsubcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAtribuicaoSemSubComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSemSubComando psemsubcomandoNode1;
        {
            // Block
        PComandoAtribuicao pcomandoatribuicaoNode2;
        TPVirg tpvirgNode3;
        pcomandoatribuicaoNode2 = (PComandoAtribuicao)nodeArrayList1.get(0);
        tpvirgNode3 = (TPVirg)nodeArrayList2.get(0);

        psemsubcomandoNode1 = new AAtribuicaoSemSubComando(pcomandoatribuicaoNode2, tpvirgNode3);
        }
	nodeList.add(psemsubcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AFuncaoSemSubComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSemSubComando psemsubcomandoNode1;
        {
            // Block
        PComandoFuncao pcomandofuncaoNode2;
        TPVirg tpvirgNode3;
        pcomandofuncaoNode2 = (PComandoFuncao)nodeArrayList1.get(0);
        tpvirgNode3 = (TPVirg)nodeArrayList2.get(0);

        psemsubcomandoNode1 = new AFuncaoSemSubComando(pcomandofuncaoNode2, tpvirgNode3);
        }
	nodeList.add(psemsubcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ARetornoSemSubComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSemSubComando psemsubcomandoNode1;
        {
            // Block
        PComandoRetorno pcomandoretornoNode2;
        TPVirg tpvirgNode3;
        pcomandoretornoNode2 = (PComandoRetorno)nodeArrayList1.get(0);
        tpvirgNode3 = (TPVirg)nodeArrayList2.get(0);

        psemsubcomandoNode1 = new ARetornoSemSubComando(pcomandoretornoNode2, tpvirgNode3);
        }
	nodeList.add(psemsubcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AVariavelComandoAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoAtribuicao pcomandoatribuicaoNode1;
        {
            // Block
        TId tidNode2;
        TAtrib tatribNode3;
        PExpGeral pexpgeralNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tatribNode3 = (TAtrib)nodeArrayList2.get(0);
        pexpgeralNode4 = (PExpGeral)nodeArrayList3.get(0);

        pcomandoatribuicaoNode1 = new AVariavelComandoAtribuicao(tidNode2, tatribNode3, pexpgeralNode4);
        }
	nodeList.add(pcomandoatribuicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AMatrizComandoAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoAtribuicao pcomandoatribuicaoNode1;
        {
            // Block
        TId tidNode2;
        TACol tacolNode3;
        PSeqParametro pseqparametroNode4;
        TFCol tfcolNode5;
        TAtrib tatribNode6;
        PExpGeral pexpgeralNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tacolNode3 = (TACol)nodeArrayList2.get(0);
        pseqparametroNode4 = (PSeqParametro)nodeArrayList3.get(0);
        tfcolNode5 = (TFCol)nodeArrayList4.get(0);
        tatribNode6 = (TAtrib)nodeArrayList5.get(0);
        pexpgeralNode7 = (PExpGeral)nodeArrayList6.get(0);

        pcomandoatribuicaoNode1 = new AMatrizComandoAtribuicao(tidNode2, tacolNode3, pseqparametroNode4, tfcolNode5, tatribNode6, pexpgeralNode7);
        }
	nodeList.add(pcomandoatribuicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AComandoRepeticao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoRepeticao pcomandorepeticaoNode1;
        {
            // Block
        TPChaveWhile tpchavewhileNode2;
        TAPar taparNode3;
        PExpGeral pexpgeralNode4;
        TFPar tfparNode5;
        PComando pcomandoNode6;
        tpchavewhileNode2 = (TPChaveWhile)nodeArrayList1.get(0);
        taparNode3 = (TAPar)nodeArrayList2.get(0);
        pexpgeralNode4 = (PExpGeral)nodeArrayList3.get(0);
        tfparNode5 = (TFPar)nodeArrayList4.get(0);
        pcomandoNode6 = (PComando)nodeArrayList5.get(0);

        pcomandorepeticaoNode1 = new AComandoRepeticao(tpchavewhileNode2, taparNode3, pexpgeralNode4, tfparNode5, pcomandoNode6);
        }
	nodeList.add(pcomandorepeticaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AComandoCondicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoCondicao pcomandocondicaoNode1;
        {
            // Block
        TPChaveIf tpchaveifNode2;
        TAPar taparNode3;
        PExpGeral pexpgeralNode4;
        TFPar tfparNode5;
        PComando pcomandoNode6;
        tpchaveifNode2 = (TPChaveIf)nodeArrayList1.get(0);
        taparNode3 = (TAPar)nodeArrayList2.get(0);
        pexpgeralNode4 = (PExpGeral)nodeArrayList3.get(0);
        tfparNode5 = (TFPar)nodeArrayList4.get(0);
        pcomandoNode6 = (PComando)nodeArrayList5.get(0);

        pcomandocondicaoNode1 = new AComandoCondicao(tpchaveifNode2, taparNode3, pexpgeralNode4, tfparNode5, pcomandoNode6);
        }
	nodeList.add(pcomandocondicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AComandoCondicaoElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoCondicaoElse pcomandocondicaoelseNode1;
        {
            // Block
        TPChaveIf tpchaveifNode2;
        TAPar taparNode3;
        PExpGeral pexpgeralNode4;
        TFPar tfparNode5;
        PComandoIfNaoCurto pcomandoifnaocurtoNode6;
        TPChaveElse tpchaveelseNode7;
        PComando pcomandoNode8;
        tpchaveifNode2 = (TPChaveIf)nodeArrayList1.get(0);
        taparNode3 = (TAPar)nodeArrayList2.get(0);
        pexpgeralNode4 = (PExpGeral)nodeArrayList3.get(0);
        tfparNode5 = (TFPar)nodeArrayList4.get(0);
        pcomandoifnaocurtoNode6 = (PComandoIfNaoCurto)nodeArrayList5.get(0);
        tpchaveelseNode7 = (TPChaveElse)nodeArrayList6.get(0);
        pcomandoNode8 = (PComando)nodeArrayList7.get(0);

        pcomandocondicaoelseNode1 = new AComandoCondicaoElse(tpchaveifNode2, taparNode3, pexpgeralNode4, tfparNode5, pcomandoifnaocurtoNode6, tpchaveelseNode7, pcomandoNode8);
        }
	nodeList.add(pcomandocondicaoelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AComandoRepeticaoIfNaoCurto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoRepeticaoIfNaoCurto pcomandorepeticaoifnaocurtoNode1;
        {
            // Block
        TPChaveWhile tpchavewhileNode2;
        TAPar taparNode3;
        PExpGeral pexpgeralNode4;
        TFPar tfparNode5;
        PComandoIfNaoCurto pcomandoifnaocurtoNode6;
        tpchavewhileNode2 = (TPChaveWhile)nodeArrayList1.get(0);
        taparNode3 = (TAPar)nodeArrayList2.get(0);
        pexpgeralNode4 = (PExpGeral)nodeArrayList3.get(0);
        tfparNode5 = (TFPar)nodeArrayList4.get(0);
        pcomandoifnaocurtoNode6 = (PComandoIfNaoCurto)nodeArrayList5.get(0);

        pcomandorepeticaoifnaocurtoNode1 = new AComandoRepeticaoIfNaoCurto(tpchavewhileNode2, taparNode3, pexpgeralNode4, tfparNode5, pcomandoifnaocurtoNode6);
        }
	nodeList.add(pcomandorepeticaoifnaocurtoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AComandoCondicaoElseIfNaoCurto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoCondicaoElseIfNaoCurto pcomandocondicaoelseifnaocurtoNode1;
        {
            // Block
        TPChaveIf tpchaveifNode2;
        TAPar taparNode3;
        PExpGeral pexpgeralNode4;
        TFPar tfparNode5;
        PComandoIfNaoCurto pcomandoifnaocurtoNode6;
        TPChaveElse tpchaveelseNode7;
        PComandoIfNaoCurto pcomandoifnaocurtoNode8;
        tpchaveifNode2 = (TPChaveIf)nodeArrayList1.get(0);
        taparNode3 = (TAPar)nodeArrayList2.get(0);
        pexpgeralNode4 = (PExpGeral)nodeArrayList3.get(0);
        tfparNode5 = (TFPar)nodeArrayList4.get(0);
        pcomandoifnaocurtoNode6 = (PComandoIfNaoCurto)nodeArrayList5.get(0);
        tpchaveelseNode7 = (TPChaveElse)nodeArrayList6.get(0);
        pcomandoifnaocurtoNode8 = (PComandoIfNaoCurto)nodeArrayList7.get(0);

        pcomandocondicaoelseifnaocurtoNode1 = new AComandoCondicaoElseIfNaoCurto(tpchaveifNode2, taparNode3, pexpgeralNode4, tfparNode5, pcomandoifnaocurtoNode6, tpchaveelseNode7, pcomandoifnaocurtoNode8);
        }
	nodeList.add(pcomandocondicaoelseifnaocurtoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAcomandofuncao1ComandoFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoFuncao pcomandofuncaoNode1;
        {
            // Block
        TId tidNode2;
        TAPar taparNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TFPar tfparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        taparNode3 = (TAPar)nodeArrayList2.get(0);
        tfparNode5 = (TFPar)nodeArrayList3.get(0);

        pcomandofuncaoNode1 = new AComandoFuncao(tidNode2, taparNode3, null, tfparNode5);
        }
	nodeList.add(pcomandofuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAcomandofuncao2ComandoFuncao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoFuncao pcomandofuncaoNode1;
        {
            // Block
        TId tidNode2;
        TAPar taparNode3;
        PSeqParametro pseqparametroNode4;
        TFPar tfparNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        taparNode3 = (TAPar)nodeArrayList2.get(0);
        pseqparametroNode4 = (PSeqParametro)nodeArrayList3.get(0);
        tfparNode5 = (TFPar)nodeArrayList4.get(0);

        pcomandofuncaoNode1 = new AComandoFuncao(tidNode2, taparNode3, pseqparametroNode4, tfparNode5);
        }
	nodeList.add(pcomandofuncaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AListaSeqParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSeqParametro pseqparametroNode1;
        {
            // Block
        PSeqParametro pseqparametroNode2;
        TVirg tvirgNode3;
        PExpGeral pexpgeralNode4;
        pseqparametroNode2 = (PSeqParametro)nodeArrayList1.get(0);
        tvirgNode3 = (TVirg)nodeArrayList2.get(0);
        pexpgeralNode4 = (PExpGeral)nodeArrayList3.get(0);

        pseqparametroNode1 = new AListaSeqParametro(pseqparametroNode2, tvirgNode3, pexpgeralNode4);
        }
	nodeList.add(pseqparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AUnicoSeqParametro */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSeqParametro pseqparametroNode1;
        {
            // Block
        PExpGeral pexpgeralNode2;
        pexpgeralNode2 = (PExpGeral)nodeArrayList1.get(0);

        pseqparametroNode1 = new AUnicoSeqParametro(pexpgeralNode2);
        }
	nodeList.add(pseqparametroNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AComandoRetorno */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoRetorno pcomandoretornoNode1;
        {
            // Block
        TPChaveReturn tpchavereturnNode2;
        PExpGeral pexpgeralNode3;
        tpchavereturnNode2 = (TPChaveReturn)nodeArrayList1.get(0);
        pexpgeralNode3 = (PExpGeral)nodeArrayList2.get(0);

        pcomandoretornoNode1 = new AComandoRetorno(tpchavereturnNode2, pexpgeralNode3);
        }
	nodeList.add(pcomandoretornoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AOpBoolExpGeral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpGeral pexpgeralNode1;
        {
            // Block
        PExp pexpNode2;
        POpBool popboolNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        popboolNode3 = (POpBool)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpgeralNode1 = new AOpBoolExpGeral(pexpNode2, popboolNode3, pexpNode4);
        }
	nodeList.add(pexpgeralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExpExpGeral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpGeral pexpgeralNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pexpgeralNode1 = new AExpExpGeral(pexpNode2);
        }
	nodeList.add(pexpgeralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AOpSomaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        POpSoma popsomaNode3;
        PTermo ptermoNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        popsomaNode3 = (POpSoma)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        pexpNode1 = new AOpSomaExp(pexpNode2, popsomaNode3, ptermoNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ATermoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PTermo ptermoNode2;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);

        pexpNode1 = new ATermoExp(ptermoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AOpMultTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PTermo ptermoNode2;
        POpMult popmultNode3;
        PFator pfatorNode4;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        popmultNode3 = (POpMult)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        ptermoNode1 = new AOpMultTermo(ptermoNode2, popmultNode3, pfatorNode4);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PFator pfatorNode2;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);

        ptermoNode1 = new AFatorTermo(pfatorNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AIdFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pfatorNode1 = new AIdFator(tidNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ANumFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TNum tnumNode2;
        tnumNode2 = (TNum)nodeArrayList1.get(0);

        pfatorNode1 = new ANumFator(tnumNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AStrFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TStr tstrNode2;
        tstrNode2 = (TStr)nodeArrayList1.get(0);

        pfatorNode1 = new AStrFator(tstrNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AFuncaoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PComandoFuncao pcomandofuncaoNode2;
        pcomandofuncaoNode2 = (PComandoFuncao)nodeArrayList1.get(0);

        pfatorNode1 = new AFuncaoFator(pcomandofuncaoNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AParFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TAPar taparNode2;
        PExpGeral pexpgeralNode3;
        TFPar tfparNode4;
        taparNode2 = (TAPar)nodeArrayList1.get(0);
        pexpgeralNode3 = (PExpGeral)nodeArrayList2.get(0);
        tfparNode4 = (TFPar)nodeArrayList3.get(0);

        pfatorNode1 = new AParFator(taparNode2, pexpgeralNode3, tfparNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AMaiorQueOpBool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpBool popboolNode1;
        {
            // Block
        TMaior tmaiorNode2;
        tmaiorNode2 = (TMaior)nodeArrayList1.get(0);

        popboolNode1 = new AMaiorQueOpBool(tmaiorNode2);
        }
	nodeList.add(popboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AMaiorOuIgualOpBool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpBool popboolNode1;
        {
            // Block
        TMaiorI tmaioriNode2;
        tmaioriNode2 = (TMaiorI)nodeArrayList1.get(0);

        popboolNode1 = new AMaiorOuIgualOpBool(tmaioriNode2);
        }
	nodeList.add(popboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AMenorQueOpBool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpBool popboolNode1;
        {
            // Block
        TMenor tmenorNode2;
        tmenorNode2 = (TMenor)nodeArrayList1.get(0);

        popboolNode1 = new AMenorQueOpBool(tmenorNode2);
        }
	nodeList.add(popboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AMenorOuIgualOpBool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpBool popboolNode1;
        {
            // Block
        TMenorI tmenoriNode2;
        tmenoriNode2 = (TMenorI)nodeArrayList1.get(0);

        popboolNode1 = new AMenorOuIgualOpBool(tmenoriNode2);
        }
	nodeList.add(popboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AIgualOpBool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpBool popboolNode1;
        {
            // Block
        TIgual tigualNode2;
        tigualNode2 = (TIgual)nodeArrayList1.get(0);

        popboolNode1 = new AIgualOpBool(tigualNode2);
        }
	nodeList.add(popboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ADiferenteOpBool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpBool popboolNode1;
        {
            // Block
        TDif tdifNode2;
        tdifNode2 = (TDif)nodeArrayList1.get(0);

        popboolNode1 = new ADiferenteOpBool(tdifNode2);
        }
	nodeList.add(popboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ASomaOpSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpSoma popsomaNode1;
        {
            // Block
        TSoma tsomaNode2;
        tsomaNode2 = (TSoma)nodeArrayList1.get(0);

        popsomaNode1 = new ASomaOpSoma(tsomaNode2);
        }
	nodeList.add(popsomaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ASubOpSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpSoma popsomaNode1;
        {
            // Block
        TSub tsubNode2;
        tsubNode2 = (TSub)nodeArrayList1.get(0);

        popsomaNode1 = new ASubOpSoma(tsubNode2);
        }
	nodeList.add(popsomaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AMultOpMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpMult popmultNode1;
        {
            // Block
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        popmultNode1 = new AMultOpMult(tmultNode2);
        }
	nodeList.add(popmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ADivOpMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpMult popmultNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        popmultNode1 = new ADivOpMult(tdivNode2);
        }
	nodeList.add(popmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ATerminal$Mult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TMult tmultNode1;
        tmultNode1 = (TMult)nodeArrayList1.get(0);
	if(tmultNode1 != null)
	{
	  listNode2.add(tmultNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANonTerminal$Mult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TMult tmultNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tmultNode2 = (TMult)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tmultNode2 != null)
	{
	  listNode3.add(tmultNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 3}, {7, SHIFT, 11}, },
			{{-1, ERROR, 4}, {30, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 7}, {21, SHIFT, 12}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 9}, {7, SHIFT, 13}, },
			{{-1, ERROR, 10}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 3}, },
			{{-1, ERROR, 11}, {23, SHIFT, 16}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 5}, {23, SHIFT, 17}, {25, SHIFT, 18}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 16}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 19}, {24, SHIFT, 20}, },
			{{-1, ERROR, 17}, {2, SHIFT, 1}, {3, SHIFT, 2}, {5, SHIFT, 24}, {24, SHIFT, 25}, },
			{{-1, ERROR, 18}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, ERROR, 19}, {24, SHIFT, 37}, },
			{{-1, ERROR, 20}, {27, SHIFT, 38}, },
			{{-1, ERROR, 21}, {7, SHIFT, 40}, {12, SHIFT, 41}, },
			{{-1, ERROR, 22}, {22, SHIFT, 43}, {24, SHIFT, 44}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 24}, {24, SHIFT, 45}, },
			{{-1, ERROR, 25}, {27, SHIFT, 38}, },
			{{-1, ERROR, 26}, {22, SHIFT, 43}, {24, SHIFT, 47}, },
			{{-1, REDUCE, 52}, {23, SHIFT, 48}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 30}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 32}, {22, SHIFT, 50}, {26, SHIFT, 51}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 47}, {10, SHIFT, 52}, {11, SHIFT, 53}, {14, SHIFT, 54}, {15, SHIFT, 55}, {16, SHIFT, 56}, {17, SHIFT, 57}, {18, SHIFT, 58}, {19, SHIFT, 59}, },
			{{-1, REDUCE, 49}, {12, SHIFT, 62}, {13, SHIFT, 63}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 37}, {27, SHIFT, 38}, },
			{{-1, ERROR, 38}, {1, SHIFT, 66}, {2, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 67}, {6, SHIFT, 68}, {7, SHIFT, 69}, {27, SHIFT, 38}, {28, SHIFT, 70}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 42}, {7, SHIFT, 84}, {12, SHIFT, 85}, },
			{{-1, ERROR, 43}, {2, SHIFT, 1}, {3, SHIFT, 2}, },
			{{-1, ERROR, 44}, {27, SHIFT, 38}, },
			{{-1, ERROR, 45}, {27, SHIFT, 38}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 47}, {27, SHIFT, 38}, },
			{{-1, ERROR, 48}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, {24, SHIFT, 90}, },
			{{-1, ERROR, 49}, {24, SHIFT, 92}, },
			{{-1, ERROR, 50}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 60}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, ERROR, 61}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 64}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, REDUCE, 12}, {30, REDUCE, 2}, },
			{{-1, ERROR, 66}, {23, SHIFT, 97}, },
			{{-1, ERROR, 67}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, ERROR, 68}, {23, SHIFT, 99}, },
			{{-1, ERROR, 69}, {20, SHIFT, 100}, {23, SHIFT, 48}, {25, SHIFT, 101}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 71}, {21, SHIFT, 102}, },
			{{-1, ERROR, 72}, {7, SHIFT, 103}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 74}, {28, SHIFT, 104}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 77}, {21, SHIFT, 105}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 81}, {21, SHIFT, 106}, },
			{{-1, ERROR, 82}, {21, SHIFT, 107}, },
			{{-1, REDUCE, 21}, {1, SHIFT, 66}, {2, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 67}, {6, SHIFT, 68}, {7, SHIFT, 69}, {27, SHIFT, 38}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 91}, {22, SHIFT, 50}, {24, SHIFT, 109}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 46}, {10, SHIFT, 52}, {11, SHIFT, 53}, },
			{{-1, REDUCE, 48}, {12, SHIFT, 62}, {13, SHIFT, 63}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 97}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 99}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, ERROR, 100}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, ERROR, 101}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 5}, {25, SHIFT, 18}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 110}, {24, SHIFT, 114}, },
			{{-1, ERROR, 111}, {24, SHIFT, 115}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 113}, {22, SHIFT, 50}, {26, SHIFT, 116}, },
			{{-1, ERROR, 114}, {1, SHIFT, 117}, {2, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 67}, {6, SHIFT, 118}, {7, SHIFT, 69}, {27, SHIFT, 38}, },
			{{-1, ERROR, 115}, {1, SHIFT, 66}, {2, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 67}, {6, SHIFT, 68}, {7, SHIFT, 69}, {27, SHIFT, 38}, },
			{{-1, ERROR, 116}, {20, SHIFT, 125}, },
			{{-1, ERROR, 117}, {23, SHIFT, 126}, },
			{{-1, ERROR, 118}, {23, SHIFT, 127}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 120}, {0, SHIFT, 128}, },
			{{-1, REDUCE, 22}, {0, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 125}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, ERROR, 126}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, ERROR, 127}, {7, SHIFT, 27}, {8, SHIFT, 28}, {9, SHIFT, 29}, {23, SHIFT, 30}, },
			{{-1, ERROR, 128}, {1, SHIFT, 66}, {2, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 67}, {6, SHIFT, 68}, {7, SHIFT, 69}, {27, SHIFT, 38}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 130}, {24, SHIFT, 133}, },
			{{-1, ERROR, 131}, {24, SHIFT, 134}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 133}, {1, SHIFT, 117}, {2, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 67}, {6, SHIFT, 118}, {7, SHIFT, 69}, {27, SHIFT, 38}, },
			{{-1, ERROR, 134}, {1, SHIFT, 117}, {2, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 67}, {6, SHIFT, 118}, {7, SHIFT, 69}, {27, SHIFT, 38}, },
			{{-1, ERROR, 135}, {0, SHIFT, 137}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 137}, {1, SHIFT, 117}, {2, SHIFT, 1}, {3, SHIFT, 2}, {4, SHIFT, 67}, {6, SHIFT, 118}, {7, SHIFT, 69}, {27, SHIFT, 38}, },
			{{-1, REDUCE, 40}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, {10, 14}, },
			{{-1, 6}, {10, 15}, },
			{{-1, 71}, {0, 7}, {10, 7}, },
			{{-1, 8}, },
			{{-1, 72}, {0, 9}, {10, 9}, {16, 21}, {17, 21}, {43, 21}, },
			{{-1, 22}, {17, 26}, },
			{{-1, 23}, {43, 86}, },
			{{-1, 73}, {20, 39}, {25, 46}, {37, 65}, {44, 87}, {45, 88}, {47, 89}, },
			{{-1, 74}, },
			{{-1, 119}, {38, 75}, {83, 108}, {115, 124}, {128, 132}, {134, 124}, {137, 132}, },
			{{-1, 120}, {133, 135}, {134, 136}, {137, 138}, },
			{{-1, 76}, {114, 121}, {133, 121}, {134, 121}, {137, 121}, },
			{{-1, 77}, },
			{{-1, 78}, },
			{{-1, 79}, },
			{{-1, 80}, },
			{{-1, 122}, },
			{{-1, 123}, },
			{{-1, 31}, {38, 81}, {83, 81}, {114, 81}, {115, 81}, {128, 81}, {133, 81}, {134, 81}, {137, 81}, },
			{{-1, 32}, {48, 91}, {101, 113}, },
			{{-1, 82}, },
			{{-1, 33}, {30, 49}, {50, 93}, {67, 98}, {97, 110}, {99, 111}, {100, 112}, {125, 129}, {126, 130}, {127, 131}, },
			{{-1, 34}, {60, 94}, },
			{{-1, 35}, {61, 95}, },
			{{-1, 36}, {64, 96}, },
			{{-1, 60}, },
			{{-1, 61}, },
			{{-1, 64}, },
			{{-1, 10}, },
			{{-1, 42}, },
			{{-1, 83}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'int', 'string', 'void'",
			"expecting: id, '*'",
			"expecting: id",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: '('",
			"expecting: ';', '(', '['",
			"expecting: 'int', 'string', 'void', ')'",
			"expecting: id, num, str, '('",
			"expecting: ')'",
			"expecting: '{'",
			"expecting: ',', ')'",
			"expecting: '+', '-', '*', '/', '<', '>', '<=', '>=', '==', '!=', ';', ',', '(', ')', ']'",
			"expecting: '+', '-', '*', '/', '<', '>', '<=', '>=', '==', '!=', ';', ',', ')', ']'",
			"expecting: ',', ']'",
			"expecting: ',', ')', ']'",
			"expecting: '+', '-', '<', '>', '<=', '>=', '==', '!=', ';', ',', ')', ']'",
			"expecting: 'if', 'int', 'string', 'return', 'while', id, '{', '}'",
			"expecting: 'int', 'string'",
			"expecting: id, num, str, '(', ')'",
			"expecting: 'int', 'string', 'void', EOF",
			"expecting: '=', '(', '['",
			"expecting: 'else', 'if', 'int', 'string', 'return', 'void', 'while', id, '{', '}', EOF",
			"expecting: 'else', 'if', 'int', 'string', 'return', 'while', id, '{', '}'",
			"expecting: '}'",
			"expecting: '+', '-', ';', ',', ')', ']'",
			"expecting: ';', '['",
			"expecting: 'if', 'int', 'string', 'return', 'while', id, '{'",
			"expecting: '='",
			"expecting: 'else'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 3, 0, 4, 0, 2, 0, 5, 0, 6, 3, 0, 7, 7, 8, 9, 10, 1, 11, 11, 9, 10, 11, 12, 13, 13, 8, 13, 14, 15, 16, 13, 13, 10, 17, 0, 11, 1, 1, 18, 10, 10, 0, 10, 19, 9, 8, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 5, 8, 5, 21, 22, 4, 2, 23, 24, 17, 17, 4, 17, 17, 17, 4, 4, 17, 11, 1, 11, 0, 0, 0, 13, 11, 13, 15, 25, 13, 13, 8, 4, 8, 8, 8, 23, 26, 22, 23, 23, 23, 17, 13, 9, 9, 4, 14, 27, 27, 28, 5, 5, 17, 29, 23, 29, 29, 17, 8, 8, 8, 27, 4, 9, 9, 17, 27, 27, 29, 29, 27, 29, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
